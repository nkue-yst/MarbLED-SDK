@startuml TouchLED-Middleware

namespace tll {

    class BaseApp {
        +addTuioObject(TUIO::TuioObject* tobj): void
        +updateTuioObject(TUIO::TuioObject* tobj): void
        +removeTuioObject(TUIO::TuioObject* tobj): void

        +run(): void
        +switchApp(const std::string app_name): bool

        +getRunningApp(): AppInterface*

        -loadApps(): uint32_t

        -app_list: std::unordered_map<std::string, void*>
        -running_app: std::unique_ptr<AppInterface>

        -tuio_client: TUIO::TuioClient*
        -osc_receiver: TUIO::OscReceiver*

        -is_home_: bool
        -icon_img: tll::Image*

        -icon_pressed: bool[3]
        -back_to_home_flag: bool

        -back_to_home_tp: std::chrono::system_clock::time_point

        -is_playing_anim: int8_t
    }

    abstract class AppInterface {
        {abstract} +init(): void
        {abstract} +run(): void
        {abstract} +terminate(): void

        {abstract} +onTouched(): void
        {abstract} +onMoved(): void
        {abstract} +onReleased(): void

        {abstract} +procOscMessage(const osc::ReceivedMessage& msg): void
    }

    class tllEngine {
        +init(uint16_t width, uint16_t height, std::string LED_driver): void
        +run(): void
        +quit(): void

        {static} +get(): tll::tllEngine*
        {static} +getComponent(): auto*

        {static} -pInstance_: std::unique_ptr<tllEngine>

        -components_: std::tuple<
            tllComponent<IEventHandler>,
            tllComponent<IPanelManager>,
            tllComponent<ISerialManager>,
            tllComponent<ITextRenderer>
        >

        -initialized_: bool
    }

    class tllComponent {
        +get(): auto*
        +release(): void
    }

    abstract class IEventHandler {
        {static} +create(): IEventHandler*
        {abstract} +init(): void
        {abstract} +updateState(): void
        
        {abstract} +addTouchedPoint(uint32_t id, int32_t x, int32_t y): void
        {abstract} +updateTouchedPoint(uint32_t id, int32_t x, int32_t y): void
        {abstract} +removeTouchedPoint(uint32_t id): void

        {abstract} +getTouchedNum(): uint32_t

        +getQuitFlag(): bool
        +setQuitFlag(): void

        -quit_flag_: bool
    }

    class EventHandlerTuio {
        +init(): void
        +updateState(): void

        +addTouchedPoint(uint32_t id, int32_t x, int32_t y): void
        +updateTouchedPoint(uint32_t id, int32_t x, int32_t y): void
        +removeTouchedPoint(uint32_t id): void

        +getTouchedNum(): uint32_t

        -kbhit(): int

        -sender_: TUIO::OscSender*
        -server_: TUIO::TuioServer*

        -tobj_list_: std::map<uint32_t, TUIO::TuioObject*>
    }

    abstract class IPanelManager {
        {static} +create(): IPanelManager*
        {abstract} +init(uint16_t width, uint16_t height): void

        {abstract} +drawPixel(uint16_t x, uint16_t y, Color c): void
        {abstract} +drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, Color c): void
        {abstract} +drawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, Color c): void
        {abstract} +drawCircle(uint16_t x, uint16_t y, uint16_t rad, Color c): void

        {abstract} +clear(): void

        +getWidth(): uint16_t
        +getHeight(): uint16_t
        +setWidth(): void
        +setHeight(): void
        
        +getPixelsNum(): uint16_t

        +getColor(int x, int y): tll::Color

        #color_: std::vector<tll::Color>
        #width_: uint16_t
        #height_: uint16_t
    }

    class PanelManager {
        +init(uint16_t width, uint16_t height): void

        +drawPixel(uint16_t x, uint16_t y, Color c): void
        +drawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, Color c): void
        +drawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, Color c): void
        +drawCircle(uint16_t x, uint16_t y, uint16_t rad, Color c): void

        +clear(): void
    }

    abstract class ISerialManager {
        +create(): ISerialManager

        {abstract} +init(std::string LED_driver): void
        {abstract} +sendColorData(): void

        +send_ready: bool

        #system_mode: int
        #led_driver_: std::string
    }

    class SerialManager {
        +init(std::string LED_driver): void
        +sendColorData(): void
    }

    abstract class ITextRenderer {
        +create(): ITextRenderer

        {abstract} +init(): void
        {abstract} +drawText(std::string str, tll::Color color, uint32_t x, uint32_t y, uint16_t size): void

        {abstract} #loadFont(const char* font_file_path): void

        #ft2_: cv::Ptr<cv::freetype::FreeType2>
        #font_size_: uint32_t
    }

    class TextRenderer {
        +init(): void
        +drawText(std::string str, tll::Color color, uint32_t x, uint32_t y, uint16_t size): void

        -loadFont(const char* font_file_path): void
    }

    struct Color {
        +calcDiff(Color c1, Color c2): uint32_t

        +r_: uint8_t
        +g_: uint8_t
        +b_: uint8_t
    }

    class OscReceiver {
        #ProcessMessage(...): void
        -split(const std::string msg): std::vector<std::string>

        -osc_mutex_: std::mutex
    }

    class Image {
        +draw(uint32_t x, uint32_t y): void
        +draw(uint32_t x, uint32_t y, tll::Color color): void
        
        +resize(uint32_t height, uint32_t width): void

        -img_data_: cv::Mat
    }

    class Video {
        +play(uint32_t pos_x, uint32_t pos_y, uint32_t size_rate): void

        -video_data_: cv::VideoCapture
    }

    tllEngine o-- tllComponent
    tllComponent <-- IEventHandler
    tllComponent <-- IPanelManager
    tllComponent <-- ISerialManager
    tllComponent <-- ITextRenderer

    BaseApp o-- AppInterface
    IEventHandler <|.. EventHandlerTuio
    IPanelManager <|.. PanelManager
    ISerialManager <|.. SerialManager
    ITextRenderer <|.. TextRenderer

    cv.Mat o-- Image
    cv.VideoCapture o-- Video

    abstract class osc.OscPacketListenner
    osc.OscPacketListenner <|-- OscReceiver

    abstract class TUIO.TuioListenner
    TUIO.TuioListenner <|-- BaseApp
    TUIO.TuioClient *-- BaseApp
    TUIO.OscReceiver *-- BaseApp
    TUIO.TuioObject <-- BaseApp
    TUIO.TuioObject <-- EventHandlerTuio

}

@enduml
