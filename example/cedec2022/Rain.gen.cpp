/********************************************
 ** This file is generated by AppGenerator **
 ********************************************/

#include "Rain.gen.hpp"

Rain* Rain::load()
{
    return AppBase::load<Rain>();
}

void Rain::init()
{

}

void Rain::run()
{
    this->is_running = true;

    while (loop())
    {
        if (!this->is_running)
            break;

        this->updateRipples();
    }
}

void Rain::terminate()
{

}

void Rain::procMessage(const osc::ReceivedMessage& msg)
{
/*     if (strcmp(msg.AddressPattern(), "/tll/app/rain") == 0)
    {
        int32_t coord = msg.ArgumentsBegin()->AsInt32();
        this->onTouched(coord, coord);
    } */
}

void Rain::onTouched(uint32_t x, uint32_t y)
{
    if (this->ripples.size() >= 4)
    {
        this->ripples.erase(this->ripples.begin());
        this->ripples.erase(this->ripples.begin());
    }

    struct Ripple r1 = {x, y, 1};
    struct Ripple r2 = {x, y, 0};

    this->ripples.push_back(r1);
    this->ripples.push_back(r2);
}

void Rain::onMoved(uint32_t x, uint32_t y)
{

}

void Rain::onReleased()
{

}

void Rain::updateRipples()
{
    clear();
    for (auto& ripple : this->ripples)
    {
        drawCircle(ripple.x, ripple.y, ripple.r, Palette::color("Aqua"));
        ripple.r++;
        
        if (ripple.r >= 64)
            this->ripples.erase(this->ripples.begin());
    }
    std::this_thread::sleep_for(
        std::chrono::milliseconds(13)
    );
}
