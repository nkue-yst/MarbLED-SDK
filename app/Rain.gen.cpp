/********************************************
 ** This file is generated by AppGenerator **
 ********************************************/

#include "Rain.gen.hpp"
#include "TLL.h"

#include <chrono>
#include <iostream>
#include <thread>

Rain::Rain()
{
    std::cout << "Create Rain instance." << std::endl;
}

Rain::~Rain()
{
    std::cout << "Delete Rain instance." << std::endl;
}

void Rain::init()
{
    this->is_running = true;
}

void Rain::run()
{
    while (tll::loop())
    {
        if (!this->is_running)
            return;

        this->updateRipples();
    }
}

void Rain::terminate()
{
    this->is_running = false;
}

void Rain::onTouched(tll::TouchInfo ti)
{
    // 既に波紋が2つ以上ある場合は1つ目を削除
    if (this->ripples.size() >= 4)
    {
        this->ripples.erase(this->ripples.begin());
        this->ripples.erase(this->ripples.begin());
    }

    /* 2つの円による波紋を作成 */
    struct Ripple r1 = {ti.x, ti.y, 1};
    struct Ripple r2 = {ti.x, ti.y, 0};

    this->ripples.push_back(r1);
    this->ripples.push_back(r2);
}

void Rain::onMoved(tll::TouchInfo ti)
{

}

void Rain::onReleased(tll::TouchInfo ti)
{

}

void Rain::updateRipples()
{
    tll::clear();

    // 半径が16以上となるまで大きくしながら波紋を描画
    for (auto& ripple : this->ripples)
    {
        tll::drawCircle(ripple.x, ripple.y, ripple.r++, tll::Palette::Aqua);

        if (ripple.r >= 32)
            this->ripples.erase(this->ripples.begin());
    }

    std::this_thread::sleep_for(std::chrono::milliseconds(16));
}
