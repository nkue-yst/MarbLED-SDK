/********************************************
 ** This file is generated by AppGenerator **
 ********************************************/

#include "ADIR01P_AirConditioner.gen.hpp"
#include "TLL.h"

#include <iostream>
#include <iomanip>
#include <string>

ADIR01P_AirConditioner::ADIR01P_AirConditioner()
    : temperature_(20.f)
    , power_on_(false)
{
    std::cout << "Create ADIR01P_AirConditioner instance." << std::endl;

    this->pressed_[0] = false;
    this->pressed_[1] = false;
    this->pressed_[2] = false;
}

ADIR01P_AirConditioner::~ADIR01P_AirConditioner()
{
    std::cout << "Delete ADIR01P_AirConditioner instance." << std::endl;
}

void ADIR01P_AirConditioner::init()
{

}

void ADIR01P_AirConditioner::run()
{
    tll::clear();

    // Temperature
    if (this->power_on_)
    {
        std::ostringstream oss;
        oss << std::fixed << std::setprecision(1) << this->temperature_;
        tll::print(oss.str(), -10, -5, 18, tll::Palette::White);
    }
    else
    {
        tll::print("--.-", -10, -2, 18, tll::Palette::White);
    }

    // Power button
    if (!this->pressed_[0])
        tll::drawRect(18, 22, 7, 7, tll::Color(255, 0, 0));
    else
        tll::drawRect(18, 22, 7, 7, tll::Color(128, 0, 0));

    // Temperature up button
    if (!this->pressed_[1])
        tll::drawRect(45, 4, 12, 12, tll::Color(50, 255, 50));
    else
        tll::drawRect(45, 4, 12, 12, tll::Color(0, 128, 0));

    tll::drawRect(47, 9, 8, 2, tll::Color(0, 0, 0));
    tll::drawRect(50, 6, 2, 8, tll::Color(0, 0, 0));

    // Temperature down button
    if (!this->pressed_[2])
        tll::drawRect(45, 17, 12, 12, tll::Color(50, 255, 50));
    else
        tll::drawRect(45, 17, 12, 12, tll::Color(0, 128, 0));

    tll::drawRect(47, 22, 8, 2, tll::Color(0, 0, 0));
}

void ADIR01P_AirConditioner::terminate()
{

}

void ADIR01P_AirConditioner::onTouched(tll::TouchInfo ti)
{
    if (ti.id != 0)
        return;

    this->pressed_[0] = (18 <= ti.x && ti.x <= 24 && 22 <= ti.y && ti.y <= 28);
    this->pressed_[1] = (45 <= ti.x && ti.x <= 56 &&  4 <= ti.y && ti.y <= 15);
    this->pressed_[2] = (45 <= ti.x && ti.x <= 56 && 17 <= ti.y && ti.y <= 28);
}

void ADIR01P_AirConditioner::onMoved(tll::TouchInfo ti)
{
    if (ti.id != 0)
        return;

    this->pressed_[0] = (18 <= ti.x && ti.x <= 24 && 22 <= ti.y && ti.y <= 28);
    this->pressed_[1] = (45 <= ti.x && ti.x <= 56 &&  4 <= ti.y && ti.y <= 15);
    this->pressed_[2] = (45 <= ti.x && ti.x <= 56 && 17 <= ti.y && ti.y <= 28);
}

void ADIR01P_AirConditioner::onReleased(tll::TouchInfo ti)
{
    if (ti.id != 0)
        return;

    if (this->pressed_[0])
    {
        if (!this->power_on_)
            std::system("bto_advanced_USBIR_cmd -d `cat command_airconditioner_on.txt`");
        else
            std::system("bto_advanced_USBIR_cmd -d `cat command_airconditioner_off.txt`");
        this->power_on_ = !this->power_on_;
        this->pressed_[0] = false;
    }
    
    if (this->pressed_[1])
    {
        if (this->temperature_ < 25.f)
            this->temperature_ += 0.5f;
        else
            this->temperature_ = 25.f;

        std::string command
            = "bto_advanced_USBIR_cmd -d `cat command_airconditioner_" + std::to_string((int)this->temperature_) + "_" + std::to_string((int)(this->temperature_ - (int)this->temperature_) * 10) + ".txt`";
        std::system(command.c_str());
        this->pressed_[1] = false;
    }
    
    if (this->pressed_[2])
    {
        if (this->temperature_ > 20.f)
            this->temperature_ -= 0.5f;
        else
            this->temperature_ = 20.f;

        std::string command
            = "bto_advanced_USBIR_cmd -d `cat command_airconditioner_" + std::to_string((int)this->temperature_) + "_" + std::to_string((int)(this->temperature_ - (int)this->temperature_) * 10) + ".txt`";
        std::system(command.c_str());        this->pressed_[2] = false;
    }
}
