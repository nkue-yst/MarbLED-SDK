/********************************************
 ** This file is generated by AppGenerator **
 ********************************************/

#include "MultiTouchLine.gen.hpp"
#include "TLL.h"

#include <iostream>

MultiTouchLine::MultiTouchLine()
    : multi_touched(false)
{
    std::cout << "Create MultiTouchLine instance." << std::endl;
}

MultiTouchLine::~MultiTouchLine()
{
    std::cout << "Delete MultiTouchLine instance." << std::endl;
}

void MultiTouchLine::init()
{

}

void MultiTouchLine::run()
{

}

void MultiTouchLine::terminate()
{

}

void MultiTouchLine::onTouched(tll::TouchInfo ti)
{
    this->updatePoint(ti, true);
}

void MultiTouchLine::onMoved(tll::TouchInfo ti)
{
    this->updatePoint(ti, true);
}

void MultiTouchLine::onReleased(tll::TouchInfo ti)
{
    this->updatePoint(ti, false);
}

void MultiTouchLine::updatePoint(tll::TouchInfo ti, bool touched)
{
    if (ti.id > 1)
        return;

    if (ti.id == 0)
    {
        this->points.first = Point{ti.x, ti.y, touched};
    }
    else if (ti.id == 1)
    {
        this->points.second = Point{ti.x, ti.y, touched};
    }

    /* 2点がタッチされていれば直線で結ぶ */
    if (this->points.first.touched && this->points.second.touched)
    {
        this->connectTwoPoints();
    }
    else
    {
        this->disconnectTwoPoints();
    }
}

void MultiTouchLine::connectTwoPoints()
{
    tll::clear();

    tll::drawLine(
        this->points.first.x,  this->points.first.y,
        this->points.second.x, this->points.second.y,
        tll::Palette::Aqua
    );
}

void MultiTouchLine::disconnectTwoPoints()
{
    tll::clear();
}
